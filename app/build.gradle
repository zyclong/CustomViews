import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.zyclong.customview"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 2
        versionName "2.0"

    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':customviewlibrary')
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.orhanobut:logger:1.15'
    testCompile 'junit:junit:4.12'
    compile 'com.google.android.gms:play-services-appindexing:8.4.0'
    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'
    compile 'com.mikepenz:itemanimators:0.5.0@aar'
    compile project(path: ':logCollector')
    compile project(path: ':logCollector')
    compile project(':logCollector')
    compile 'com.tencent.bugly:crashreport:latest.release' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0
}

task AppOutPutMethodOrder() {
    doLast {
        def capturesDirPath = project.getProjectDir().getParentFile().path + File.separator + "captures";
        def capturesDir = file(capturesDirPath);
        def traceType = "trace"
        if (!capturesDir.exists() || !capturesDir.canRead()) {
            return
        }
        def map = new TreeMap<Long, String>(
                new Comparator<Long>() {
                    public int compare(Long obj1, Long obj2) {
                        return obj2.compareTo(obj1);
                    }
                });
        //遍历拿到trace 文件名 然后排序 找到最大时间数的trace就是最新的文件，拿到字符串
        capturesDir.list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                if (name.contains(traceType)) {
                    def substring = name.substring(name.length() - 22, name.length() - 6).trim()
                    String regEx = "[^0-9]"
                    Pattern p = Pattern.compile(regEx)
                    Matcher m = p.matcher(substring)
                    def time = m.replaceAll("").trim()
                    map.put(Long.parseLong(time), name)
                }
                return false
            }
        })
        def lastTraceName = "";
        Set<Long> keySet = map.keySet();
        Iterator<Long> iterator = keySet.iterator();
        while (iterator.hasNext()) {
            Long key = iterator.next();
            lastTraceName = map.get(key);
            break;
        }

        def tracePath = capturesDirPath + File.separator + lastTraceName
        println "===== tracePath is  ${tracePath} =========="
        def orderPath = capturesDirPath + File.separator + "base_order.txt"
        def orderFile = file(orderPath)
        if(orderFile.exists()){
            orderFile.write("")
        }
        Runtime runtime = Runtime.getRuntime();
        //说明：dmtracedump 为 android sdk自带工具，要执行dmtracedump命令则需要先添加环境变量
        def baseComand = "dmtracedump  -ho " + tracePath + " >> " + orderPath
        def command = ""
        String[] cmdArray = null;
        String osName = System.getProperty("os.name");
        String osNameMatch = osName.toLowerCase();
        if(osNameMatch.contains("windows")) {
            command = "cmd /c start  /b "+baseComand;
        }else {
            cmdArray = ["bash", "-c", baseComand];
        }
        try {
            if (cmdArray != null) {
                runtime.exec(cmdArray);
            } else {
                runtime.exec(command);
            }
        } catch (Exception e) {
            println "=====Exception: ${e.getCause()}  =========="
        }
    }
}

//这里AppFilterMethodOrder 任务其实也不需要 执行找到 captures 目录找到 base_order.txt
//用Notepad++ 使用正则 先过滤 带 xit 的行 （我们只关注ent 行就行，ent代表进入执行函数    xit代表退出函数）再过滤掉你不关心的包名
// Notepad++ 中过滤将会使用到的命令行如下
//^.*xit.*$ //去除掉 含有 xit 字符串的行  然后替换为空
// ^((?!XXX).)*$  //去除不包含XXX的行  然后替换为空
//^s+   //合并空行  然后替换为空
task AppFilterMethodOrder(){
    doLast{
        def capturesDirPath = project.getProjectDir().getParentFile().path + File.separator + "captures";
        def orderPath = capturesDirPath + File.separator + "base_order.txt"
        if(!file(orderPath).exists()){
            return
        }
        BufferedReader inputStream = new BufferedReader(new FileReader(orderPath));
        def filterOrderPath = new File(capturesDirPath + File.separator + "order.txt")
        if (!filterOrderPath.exists()){
            filterOrderPath.createNewFile();
        }else {
            filterOrderPath.write("")
        }
        String content ;
        while ((content = inputStream.readLine()) != null) {
            if(content.contains(" ent ")
                    //com.zjw.appmethodorder 这里可以修改成你想要留下的包名对应的函数调用信息
                    && content.contains("com/zyclong")
            ){
                filterOrderPath .append(content+"\n")
            }
            if(content.contains(" ent ")
               && content.contains("com/abellstarlite")
            ){
                filterOrderPath .append(content+"\n")
            }
            if(content.contains(" ent ")
                  && content.contains("com/tool")
            ){
                filterOrderPath .append(content+"\n")
            }
        }
    }
}
